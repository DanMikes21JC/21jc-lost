@inherits LayoutComponentBase
@inject NotifierTitleService NotifierTitle


<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay" @onkeyup="KeyboardEventHandler">
    <div style="height: 100%; display: flex; justify-content: center; align-items: center;">
        <iframe width="800" height="450" src="https://www.youtube.com/embed/9YffrCViTVk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show" onclick=""></div>
}

<div class="imgbox">
    <img src="img/Teller.jpg" class="center-fit" />
</div>

<img src="https://img.youtube.com/vi/9YffrCViTVk/maxresdefault.jpg" style="position:absolute;width:200px;top:5px;left:5px;" @onclick="@Show" />

<audio id="audio1" name="Teller" src="/music/Teller.mp3" loop autoplay onloadeddata="setVolume()" />


@code{


    [CascadingParameter]
    protected RouteData RouteData { get; set; }

    string Title;

    [Inject] IJSRuntime JS { get; set; }

    MatTheme theme = new MatTheme()
    {
        Primary = "#fafafa",
        Secondary = "#616161",
        Surface = "#757575",
        OnSurface = "#fafafa",
        OnPrimary = "#000000"
    };


    private async Task Show()
    {
        Open();
        await JS.InvokeVoidAsync("stop");

    }


    public async Task OnNotify(string value)
    {
        await InvokeAsync(() =>
        {
            Title = value;
            StateHasChanged();
        });
    }

    protected override void OnInitialized()
    {
        NotifierTitle.Notify += OnNotify;
    }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async Task KeyboardEventHandler(KeyboardEventArgs args)
    {
        Close();
        await JS.InvokeVoidAsync("start");
    }
}
